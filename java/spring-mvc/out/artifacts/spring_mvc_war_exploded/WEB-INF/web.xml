<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    作用是在登录到tomcat管理页面可以看到显示名字-->
    <display-name>springmvc_demo</display-name>

    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
    <error-page>
        <error-code>404</error-code>
        <location>/404.jsp</location>
    </error-page>


    <!-- 配置前端控制器开始 -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--配置contextConfigLocation  -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/springmvc.xml</param-value>
        </init-param>
        <!-- load-on-startup  1  代表当tomcat启动加web.xml里就创建 DispatcherServlet的对象-->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <!-- *.action:所以的在xxxx.action结尾的请求都交给DispatcherServlet
            /* 所以的请求都交给DispacherServlet  包含静态文件的地址 js css   png  gif
                    |不推荐使用
            / 所以访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析
                        使用此种方式可以实现 RESTful风格的url
             -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <!-- 配置前端控制器结束 -->

    <!-- 编码过滤器开始 -->
    <filter>
        <filter-name>charset</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>charset</filter-name>
        <!-- <url-pattern>*.action</url-pattern> -->
        <servlet-name>springmvc</servlet-name>
    </filter-mapping>
    <!-- 编码过滤器结束 -->


    <!-- 配置spring容器的监听器 开始

        目地：在启用tomcat的时候加载 applicationContext.xml
       ApplicationContext context=new ClassPathXmlApplicationContext("classpath:applicationContext.xml')
       -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!-- 配置上下文的参数  contextConfigLocation
    在org.springframework.web.context.ContextLoader里面-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring/applicationContext.xml</param-value>
    </context-param>
    <!-- 配置spring容器的监听器 结束-->

</web-app>